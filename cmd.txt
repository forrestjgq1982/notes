
1: 
Error detected while processing /home/gqjiang/.vim/bundle/neocomplete.vim/autoload/neocomplete/context_filetype.vim:
line   31:
E117: Unknown function: context_filetype#version
1: 

    Name        Args       Address   Complete  Definition
! b Gbrowse     *    0               customlist    :execute s:Browse(<bang>0,<line1>,<count>,<f-args>)
! b Gcd         ?                    customlist    :exe 'cd<bang>'  s:fnameescape(s:repo().bare() ? s:repo().dir(<q-args>) : s:repo().tree(<q-args>))
  b Gcommit     ?                    customlist    :execute s:Commit(<q-args>)
! b Gdelete     0                                  :execute s:Remove('bdelete',<bang>0)
! b Gdiff       *                    customlist    :execute s:Diff('',<bang>0,<f-args>)
! b Ge          *                    customlist    :execute s:Edit('edit<bang>',0,<f-args>)
! b Gedit       *                    customlist    :execute s:Edit('edit<bang>',0,<f-args>)
! b Gfetch      ?                    custom        execute s:Dispatch('<bang>', 'fetch '.<q-args>)
! b Ggrep       ?                    customlist    :execute s:Grep('grep',<bang>0,<q-args>)
! b Git         ?                    customlist    :execute s:Git(<bang>0,<q-args>)
! b Glcd        ?                    customlist    :exe 'lcd<bang>' s:fnameescape(s:repo().bare() ? s:repo().dir(<q-args>) : s:repo().tree(<q-args>))
! b Glgrep      ?                    customlist    :execute s:Grep('lgrep',<bang>0,<q-args>)
! b Gllog       *    0               customlist    :call s:Log('lgrep<bang>',<line1>,<count>,<f-args>)
! b Glog        *    0               customlist    :call s:Log('grep<bang>',<line1>,<count>,<f-args>)
! b Gmerge      ?                    custom        execute s:Merge('merge', <bang>0, <q-args>)
! b Gmove       1                    customlist    :execute s:Move(<bang>0,<q-args>)
! b Gpedit      *                    customlist    :execute s:Edit('pedit',<bang>0,<f-args>)
! b Gpull       ?                    custom        execute s:Merge('pull --progress', <bang>0, <q-args>)
! b Gpush       ?                    custom        execute s:Dispatch('<bang>', 'push '.<q-args>)
! b Gread       *    .               customlist    :execute s:Edit((<count> == -1 ? '' : <count>).'read',<bang>0,<f-args>)
! b Gremove     0                                  :execute s:Remove('edit',<bang>0)
! b Gsdiff      *                    customlist    :execute s:Diff('keepalt ',<bang>0,<f-args>)
! b Gsplit      *                    customlist    :execute s:Edit('split',<bang>0,<f-args>)
  b Gstatus     0                                  :execute s:Status()
! b Gtabedit    *                    customlist    :execute s:Edit('tabedit',<bang>0,<f-args>)
! b Gvdiff      *                    customlist    :execute s:Diff('keepalt vert ',<bang>0,<f-args>)
! b Gvsplit     *                    customlist    :execute s:Edit('vsplit',<bang>0,<f-args>)
! b Gw          *                    customlist    :execute s:Write(<bang>0,<f-args>)
! b Gwq         *                    customlist    :execute s:Wq(<bang>0,<f-args>)
! b Gwrite      *                    customlist    :execute s:Write(<bang>0,<f-args>)
!   Abolish     +    0               custom        :exec s:dispatcher(<bang>0,<line1>,<line2>,<count>,[<f-args>])
!   AddTabularPattern +                                  call AddTabularPattern(<q-args>, <bang>0)
!   AddTabularPipeline +                                  call AddTabularPipeline(<q-args>, <bang>0)
    AintWordy   0                                  call wordy#init({ 'd': 'contractions' })
    AirlineRefresh 0                                  call s:airline_refresh()
    AirlineTheme ?                    customlist    call <SNR>62_airline_theme(<f-args>)
    AirlineToggle 0                                  call s:airline_toggle()
    AirlineToggleWhitespace 0                                  call airline#extensions#whitespace#toggle()
    ArtJargonWordy 0                                  call wordy#init({ 'd': 'art-jargon' })
    BeingWordy  0                                  call wordy#init({ 'd': 'being' })
    Bundle      +                                  call vundle#config#bundle(<args>)
!   BundleClean ?                                  PluginClean<bang>
    BundleDocs  0                                  PluginDocs
!   BundleInstall ?                    custom        PluginInstall<bang> <args>
!   BundleList  0                                  PluginList<bang>
!   BundleSearch ?                    custom        PluginSearch<bang> <args>
    BundleUpdate 0                                  PluginInstall!
    CCTreeAppendDB ?                    file          call s:CCTreeCmdLine.mMergeDB(<q-args>, s:DBClasses.cscopeid)
    CCTreeLoadBufferUsingTag 0                                  call s:CCTreeGlobals.mLoadBufferFromKeyword()
    CCTreeLoadDB ?                    file          call s:CCTreeCmdLine.mLoadDB(<q-args>, s:DBClasses.cscopeid)
    CCTreeLoadXRefDB ?                    file          call s:CCTreeCmdLine.mLoadDB(<q-args>, s:DBClasses.cctreexref)
    CCTreeLoadXRefDBFromDisk ?                    file          call s:CCTreeCmdLine.mLoadDBFromDisk(<q-args>)
    CCTreeOptsDisable 1                    customlist    call s:CCTreeGlobals.mDisable(<q-args>)
    CCTreeOptsEnable 1                    customlist    call s:CCTreeGlobals.mEnable(<q-args>)
    CCTreeOptsToggle 1                    customlist    call s:CCTreeGlobals.mToggle(<q-args>)
    CCTreePreviewBufferUsingTag 0                                  call s:CCTreeGlobals.mPreviewBufferFromKeyword()
    CCTreeRecurseDepthMinus 0                                  call s:CCTreeGlobals.mRecursiveDepthDecrease()
    CCTreeRecurseDepthPlus 0                                  call s:CCTreeGlobals.mRecursiveDepthIncrease()
    CCTreeSaveXRefDB ?                    file          call s:CCTreeCmdLine.mSaveDB(<q-args>, s:DBClasses.cctreexref)
    CCTreeShowLoadedDBs 0                                  call s:CCTreeGlobals.mShowLoadedDBs()
    CCTreeTraceForward ?                    customlist    call s:CCTreeTraceTreeForSymbol(<q-args>, 'c')
    CCTreeTraceReverse ?                    customlist    call s:CCTreeTraceTreeForSymbol(<q-args>, 'p')
    CCTreeUnLoadDB 0                                  call s:CCTreeGlobals.mUnLoadDBs()
    CCTreeWindowSaveCopy 0                                  call s:CCTreeGlobals.mPreviewSave()
    CCTreeWindowToggle 0                                  call s:CCTreeGlobals.mDisplayToggle()
    ClearAllCtrlPCaches 0                                  cal ctrlp#clra()
    ClearCtrlPCache 0                                  cal ctrlp#clr()
    Commentary  0    .                             call s:go(<line1>,<line2>)
    ConflictMarkerBoth 0                                  call conflict_marker#compromise()
!   ConflictMarkerNextHunk 0                                  call conflict_marker#next_conflict(<bang>0)
    ConflictMarkerNone 0                                  call conflict_marker#down_together()
    ConflictMarkerOurselves 0                                  call conflict_marker#ourselves()
!   ConflictMarkerPrevHunk 0                                  call conflict_marker#previous_conflict(<bang>0)
    ConflictMarkerThemselves 0                                  call conflict_marker#themselves()
    CtrlP       ?                    dir           cal ctrlp#init(0, { 'dir': <q-args> })
    CtrlPBookmarkDir 0                                  cal ctrlp#init(ctrlp#bookmarkdir#id())
!   CtrlPBookmarkDirAdd ?                    dir           cal ctrlp#call('ctrlp#bookmarkdir#add', '<bang>', <q-args>)
    CtrlPBufTag ?                    buffer        cal ctrlp#init(ctrlp#buffertag#cmd(0, <q-args>))
    CtrlPBufTagAll 0                                  cal ctrlp#init(ctrlp#buffertag#cmd(1))
    CtrlPBuffer 0                                  cal ctrlp#init('buf')
    CtrlPChange ?                    buffer        cal ctrlp#init(ctrlp#changes#cmd('fil', <q-args>))
    CtrlPChangeAll 0                                  cal ctrlp#init(ctrlp#changes#cmd(1))
    CtrlPClearAllCaches 0                                  cal ctrlp#clra()
    CtrlPClearCache 0                                  cal ctrlp#clr()
    CtrlPCurFile 0                                  cal ctrlp#init('fil', { 'mode': 'c' })
    CtrlPCurWD  0                                  cal ctrlp#init('fil', { 'mode': '' })
    CtrlPDir    ?                    dir           cal ctrlp#init(ctrlp#dir#id(), { 'dir': <q-args> })
    CtrlPFunky  ?                                  call ctrlp#funky#funky(<q-args>)
    CtrlPFunkyClearCache ?                                  call ctrlp#funky#clear_cache(expand('%:p'))
    CtrlPFunkyClearCacheAll ?                                  call ctrlp#funky#clear_cache_all()
    CtrlPFunkyMulti ?                                  call ctrlp#funky#funky(<q-args>, { 'multi_buffers': 1 })
    CtrlPLastMode ?                                  cal ctrlp#init(-1, { 'args': <q-args> })
    CtrlPLine   ?                    buffer        cal ctrlp#init(ctrlp#line#cmd('buf', <q-args>))
    CtrlPMRUFiles ?                    dir           cal ctrlp#init('mru', { 'dir': <q-args> })
    CtrlPMixed  0                                  cal ctrlp#init(ctrlp#mixed#id())
    CtrlPQuickfix 0                                  cal ctrlp#init(ctrlp#quickfix#id())
    CtrlPRTS    0                                  cal ctrlp#init(ctrlp#rtscript#id())
    CtrlPRoot   0                                  cal ctrlp#init('fil', { 'mode': 'r' })
    CtrlPTag    0                                  cal ctrlp#init(ctrlp#tag#id())
    CtrlPUndo   0                                  cal ctrlp#init(ctrlp#undo#id())
    DisablePHPFolds 0                                  call <SNR>111_DisablePHPFolds()
    DoMatchParen 0                                  runtime plugin/matchparen.vim | windo doau CursorMoved
!   E           *                    file          e<bang> <args>
    EMCommandLineMap *                                  call EasyMotion#command_line#cmap([<f-args>])
    EMCommandLineNoreMap *                                  call EasyMotion#command_line#cnoremap([<f-args>])
    EMCommandLineUnMap 1                                  call EasyMotion#command_line#cunmap(<f-args>)
    Educate     0                                  call textobj#quote#educate#mapKeys(1)
    Emmet       1                                  call emmet#expandAbbr(4, <q-args>)
    EmmetInstall 0                                  call <SNR>116_install_plugin(get(g:, 'user_emmet_mode', 'a'), 1)
    EnableFastPHPFolds 0                                  call <SNR>111_EnableFastPHPFolds()
    EnablePHPFolds *                                  call <SNR>111_EnablePHPFolds(<f-args>)
    Errors      0                                  call SyntasticErrors()
!   Explore     *    0c              dir           call netrw#Explore(<count>,0,0+<bang>0,<q-args>)
    GLVS        0                                  call getscript#GetLatestVimScripts()
    GTabularize *    %               customlist    <line1>,<line2> call Tabularize(<q-args>, { 'mode': 'GTabularize' } )
    GetLatestVimScripts 0                                  call getscript#GetLatestVimScripts()
    GetScripts  0                                  call getscript#GetLatestVimScripts()
!   Gist        ?    %               customlist    :call gist#Gist(<count>, "<bang>", <line1>, <line2>, <f-args>)
!   Hexplore    *    0c              dir           call netrw#Explore(<count>,1,2+<bang>0,<q-args>)
    IndentGuidesDisable 0                                  call s:IndentGuidesDisable()
    IndentGuidesEnable 0                                  call s:IndentGuidesEnable()
    IndentGuidesToggle 0                                  call s:IndentGuidesToggle()
    JargonWordy 0                                  call wordy#init({ 'd': 'business-jargon' })
    LP          *                                  call   LogiPat(<q-args>,1)
    LPE         +                                  echomsg LogiPat(<q-args>)
    LPF         +                                  let  s:LogiPatFlags="<args>"
    LPR         *                                  call   LogiPat(<q-args>,1,"r")
    LazyWordy   0                                  call wordy#init({ 'd': 'weak' })
!   Lexplore    *    0c              dir           call netrw#Lexplore(<count>,<bang>0,<q-args>)
    LogiPat     *                                  call   LogiPat(<q-args>,1)
    LogiPatFlags +                                  let  s:LogiPatFlags="<args>"
    MatchDebug  0                                  call s:Match_debug()
!   MkVimball   +    .               file          call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)
    MultipleCursorsFind 1    %                             call multiple_cursors#find(<line1>, <line2>, <q-args>)
    NERDTree    ?                    dir           :call g:NERDTreeCreator.CreateTabTree('<args>')
    NERDTreeCWD 0                                  call NERDTreeCWD()
    NERDTreeClose 0                                  :call g:NERDTree.Close()
    NERDTreeFind 0                                  call s:findAndRevealPath()
    NERDTreeFocus 0                                  call NERDTreeFocus()
    NERDTreeFocusToggle 0                                  call <SNR>52_NERDTreeFocusToggle()
    NERDTreeFromBookmark 1                    customlist    call g:NERDTreeCreator.CreateTabTree('<args>')
    NERDTreeMirror 0                                  call g:NERDTreeCreator.CreateMirror()
    NERDTreeMirrorOpen 0                                  call <SNR>52_NERDTreeMirrorOrCreate()
    NERDTreeMirrorToggle 0                                  call <SNR>52_NERDTreeMirrorToggle()
    NERDTreeSteppedClose 0                                  call <SNR>52_NERDTreeSteppedClose()
    NERDTreeSteppedOpen 0                                  call <SNR>52_NERDTreeSteppedOpen()
    NERDTreeTabsClose 0                                  call <SNR>52_NERDTreeCloseAllTabs()
    NERDTreeTabsFind 0                                  call <SNR>52_NERDTreeFindFile()
    NERDTreeTabsOpen 0                                  call <SNR>52_NERDTreeOpenAllTabs()
    NERDTreeTabsToggle 0                                  call <SNR>52_NERDTreeToggleAllTabs()
    NERDTreeToggle ?                    dir           :call g:NERDTreeCreator.ToggleTabTree('<args>')
    NeoCompleteAutoCompletionLength 1                                  call s:set_auto_completion_length(<args>)
    NeoCompleteBufferMakeCache ?                    file          call neocomplete#sources#buffer#make_cache(<q-args>)
    NeoCompleteClean 0                                  call neocomplete#commands#_clean()
    NeoCompleteDictionaryMakeCache ?                    customlist    call neocomplete#sources#dictionary#remake_cache(<q-args>)
    NeoCompleteDisable 0                                  call neocomplete#init#disable()
    NeoCompleteEnable 0                                  call neocomplete#init#enable()
    NeoCompleteLock 0                                  call neocomplete#commands#_lock()
    NeoCompleteMemberMakeCache ?                    file          call neocomplete#sources#member#remake_cache(&l:filetype)
    NeoCompleteSetFileType 1                    filetype      call neocomplete#commands#_set_file_type(<q-args>)
    NeoCompleteTagMakeCache 0                                  call neocomplete#sources#tag#make_cache(1)
    NeoCompleteToggle 0                                  call neocomplete#commands#_toggle_lock()
    NeoCompleteUnlock 0                                  call neocomplete#commands#_unlock()
    NeoSnippetClearMarkers 0                                  call neosnippet#commands#_clear_markers()
    NeoSnippetEdit ?                    customlist    call neosnippet#commands#_edit(<q-args>)
    NeoSnippetMakeCache ?                    customlist    call neosnippet#commands#_make_cache(<q-args>)
    NeoSnippetSource 1                    file          call neosnippet#commands#_source(<q-args>)
    NetUserPass *                                  call NetUserPass(<f-args>)
!   NetrwClean  0                                  call netrw#Clean(<bang>0)
    NetrwSettings 0                                  call netrwSettings#NetrwSettings()
!   Nexplore    *                                  call netrw#Explore(-1,0,0,<q-args>)
    NextWordy   0                                  call wordy#jump(1)
    NoEducate   0                                  call textobj#quote#educate#mapKeys(0)
    NoMatchParen 0                                  windo silent! call matchdelete(3) | unlet! g:loaded_matchparen | au! matchparen
    NoWordy     0                                  call wordy#init({})
    Nread       *    1c                            let s:svpos= winsaveview()|call netrw#NetRead(<count>,<f-args>)|call winrestview(s:svpos)
    Nsource     *                                  let s:svpos= winsaveview()|call netrw#NetSource(<f-args>)|call winrestview(s:svpos)
    Ntree       ?                                  call netrw#SetTreetop(<q-args>)
    Nwrite      *    %                             let s:svpos= winsaveview()|<line1>,<line2>call netrw#NetWrite(<f-args>)|call winrestview(s:svpos)
    OpineWordy  0                                  call wordy#init({ 'd': 'opinion' })
    OverCommandLine *    .                             call over#command_line(<Tab><Tab>g:over_command_line_prompt,<Tab><Tab><line1> != <line2> ? printf("'<,'>%s", <q-args>) : <q-args>,<Tab><Tab>{ "line1" : <line1>, "line2" : <line2> }<Tab>)
    OverCommandLineMap *                                  call call("s:key_mapping", map([<f-args>], "s:as_keymapping(v:val)") + [0])
    OverCommandLineNoremap *                                  call call("s:key_mapping", map([<f-args>], "s:as_keymapping(v:val)") + [1])
    OverCommandLineUnmap *                                  call s:unmapping(<q-args>)
    PassiveWordy 0                                  call wordy#init({ 'd': ['passive-voice', 'being',] })
!   Pexplore    *                                  call netrw#Explore(-2,0,0,<q-args>)
    Plugin      +                                  call vundle#config#bundle(<args>)
!   PluginClean ?                                  call vundle#installer#clean('!' == '<bang>')
    PluginDocs  0                                  call vundle#installer#helptags(g:vundle#bundles)
!   PluginInstall *                    custom        call vundle#installer#new('!' == '<bang>', <f-args>)
!   PluginList  0                                  call vundle#installer#list('!' == '<bang>')
!   PluginSearch ?                    custom        call vundle#scripts#all('!' == '<bang>', <q-args>)
    PluginUpdate *                    custom        PluginInstall! <args>
    PrevWordy   0                                  call wordy#jump(-1)
    Preview     0                                  call s:Preview()
    PreviewHtml 0                                  call s:PreviewHtml()
    PreviewMarkdown 0                                  call s:PreviewMarkdown()
    PreviewRdoc 0                                  call s:PreviewRdoc()
    PreviewRonn 0                                  call s:PreviewRonn()
    PreviewRst  0                                  call s:PreviewRst()
    PreviewTextile 0                                  call s:PreviewTextile()
    ProblemWordy 0                                  call wordy#init({ 'd': 'problematic' })
    PuffWordy   0                                  call wordy#init({ 'd': 'puffery' })
    PymodePython 1                                  python <args>
    PymodeVersion 0                                  echomsg "Pymode version: " . g:pymode_version . " interpreter: " . g:pymode_python . " lint: " . g:pymode_lint . " rope: " . g:pymode_rope
!   Q           0                                  q<bang>
!   QA          0                                  qa<bang>
!   Qa          0                                  qa<bang>
!   Rails       *    0c              customlist    execute rails#command(<bang>0, '<mods>', !<count> && <line1> ? -1 : <count>, <q-args>)
    RainbowToggle 0                                  call rainbow#toggle()
    RainbowToggleOff 0                                  call rainbow#clear()
    RainbowToggleOn 0                                  call rainbow#hook()
    RmVimball   *                    dir           call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()
!   S           1    0               custom        :exec s:subvert_dispatcher(<bang>0,<line1>,<line2>,<count>,<q-args>)
    SaidWordy   0                                  call wordy#init({ 'd': 'said-synonyms' })
    SessionClose 0                                  call s:CloseSession()
    SessionList 0                                  call s:ListSessions()
    SessionOpen 1                    custom        call s:OpenSession(<f-args>)
    SessionOpenLast 0                                  if exists('g:LAST_SESSION') | call s:OpenSession(g:LAST_SESSION) | endif
    SessionSave 0                                  call s:SaveSession()
    SessionSaveAs ?                                  call s:SaveSessionAs(<f-args>)
    SessionShowLast 0                                  call s:ShowLastSession()
!   Sexplore    *    0c              dir           call netrw#Explore(<count>,1,0+<bang>0,<q-args>)
    Shell       +                    file          call s:RunShellCommand(<q-args>)
    SignifyDebug 0                                  call sy#repo#debug_detection()
    SignifyDisable 0                                  call sy#disable()
    SignifyEnable 0                                  call sy#enable()
!   SignifyFold 0                                  call sy#fold#dispatch(<bang>1)
    SignifyList 0                                  call sy#debug#list_active_buffers()
    SignifyRefresh 0                                  call sy#util#refresh_windows()
    SignifyToggle 0                                  call sy#toggle()
    SignifyToggleHighlight 0                                  call sy#highlight#line_toggle()
    SolarizedOptions 0                                  :call s:SolarizedOptions()
!   Subvert     1    0               custom        :exec s:subvert_dispatcher(<bang>0,<line1>,<line2>,<count>,<q-args>)
    SyntasticCheck *                    custom        call SyntasticCheck(<f-args>)
    SyntasticInfo ?                    custom        call SyntasticInfo(<f-args>)
    SyntasticJavacEditClasspath 0                                  runtime! syntax_checkers/java/*.vim | SyntasticJavacEditClasspath
    SyntasticJavacEditConfig 0                                  runtime! syntax_checkers/java/*.vim | SyntasticJavacEditConfig
    SyntasticReset 0                                  call SyntasticReset()
    SyntasticSetLoclist 0                                  call SyntasticSetLoclist()
    SyntasticToggleMode 0                                  call SyntasticToggleMode()
    TBrowseOutput 1                    command       call tlib#cmd#BrowseOutput(<q-args>)
    TBrowseScriptnames 0                    command       call tlib#cmd#TBrowseScriptnames()
    TLet        +                                  if !exists(matchstr(<q-args>, '^[^=[:space:]]\+')) | exec 'let '. <q-args> | endif
    TOhtml      0    %                             :call tohtml#Convert2HTML(<line1>, <line2>)
!   TScratch    *                                  call tlib#scratch#UseScratch({'scratch_split': empty('<bang>'), <args>})
    TVarArg     +                                  exec tlib#arg#Let([<args>])
    Tabularize  *    .               customlist    <line1>,<line2>call Tabularize(<q-args>)
    Tagbar      0                                  call tagbar#ToggleWindow()
    TagbarClose 0                                  call tagbar#CloseWindow()
    TagbarCurrentTag ?                                  echo tagbar#currenttag('%s', 'No current tag', <f-args>)
    TagbarDebug ?                                  call tagbar#debug#start_debug(<f-args>)
    TagbarDebugEnd 0                                  call tagbar#debug#stop_debug()
    TagbarGetTypeConfig 1                                  call tagbar#gettypeconfig(<f-args>)
    TagbarOpen  ?                                  call tagbar#OpenWindow(<f-args>)
    TagbarOpenAutoClose 0                                  call tagbar#OpenWindow('fcj')
!   TagbarSetFoldlevel 1                                  call tagbar#SetFoldLevel(<args>, <bang>0)
    TagbarShowTag 0                                  call tagbar#highlighttag(1, 1)
    TagbarToggle 0                                  call tagbar#ToggleWindow()
    TagbarTogglePause 0                                  call tagbar#toggle_pause()
    Texplore    *    0c              dir           call netrw#Explore(<count>,0,6        ,<q-args>)
!   TextobjIndentDefaultKeyMappings 0                                  call g:__textobj_indent.define_default_key_mappings("<bang>" == "!")
!   Tlibassert  +                                  :
!   Tlibtrace   +                                  :
!   Tlibtraceset +                                  call tlib#trace#Set(tlib#arg#GetOpts([<f-args>], {'short': 0}), !empty("<bang>"))
    Tlibtype    +                                  :
    ToggleEducate 0                                  call textobj#quote#educate#toggleMappings()
    TriteWordy  0                                  call wordy#init({ 'd': ['colloquial', 'idiomatic', 'similies',] })
    UnBundle    +                                  call UnBundle(<args>)
    UndotreeFocus 0                                  :call undotree#UndotreeFocus()
    UndotreeHide 0                                  :call undotree#UndotreeHide()
    UndotreeShow 0                                  :call undotree#UndotreeShow()
    UndotreeToggle 0                                  :call undotree#UndotreeToggle()
    UseVimball  ?                    dir           call vimball#Vimball(1,<f-args>)
    VagueTimeWordy 0                                  call wordy#init({ 'd': 'vague-time' })
!   Vexplore    *    0c              dir           call netrw#Explore(<count>,1,4+<bang>0,<q-args>)
    VimballList 0                                  call vimball#Vimball(0)
    Vimuntar    ?                    file          call tar#Vimuntar(<q-args>)
!   VundleClean ?                                  PluginClean<bang>
    VundleDocs  0                                  PluginDocs
!   VundleInstall ?                    custom        PluginInstall<bang> <args>
!   VundleSearch ?                    custom        PluginSearch<bang> <args>
    VundleUpdate *                    custom        PluginInstall! <args>
!   W           *                    file          w<bang> <args>
!   WA          0                                  wa<bang>
!   WQ          *                    file          wq<bang> <args>
!   Wa          0                                  wa<bang>
    WeakWordy   0                                  call wordy#init({ 'd': 'weak' })
    WeaselWordy 0                                  call wordy#init({ 'd': 'weasel' })
    Wordy       1                    customlist    call wordy#init({ 'd': <f-args> })
    WordyWordy  0                                  call wordy#init({ 'd': 'redundant' })
!   Wq          *                    file          wq<bang> <args>
